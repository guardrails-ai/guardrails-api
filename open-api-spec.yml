openapi: '3.0.0'
info:
  title: GuardRails API
  version: '0.0.0'
  description: GuardRails CRUD API
paths:
  /health-check:
    get:
      tags:
        - Service Health 
      security:
        - apiKeyAuth: []
        - bearerAuth: []
      responses:
        '200':
          description: Returns the status of the server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
        default:
          $ref: '#/components/schemas/HttpError'
  /guards:
    get:
      operationId: getGuards
      tags:
        - guard
      summary: Fetches the configuration for all Guards the user has access to.
      security:
        - apiKeyAuth: []
        - bearerAuth: []
      responses:
        '200':
          description: A list of Guards.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Guard'
        default:
          $ref: '#/components/schemas/HttpError'
    post:
      operationId: createGuard
      tags:
        - guard
      summary: Creates a Guard
      security:
        - apiKeyAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Guard'
      responses:
        '200':
          description: the new Guard
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Guard'
        default:
          $ref: '#/components/schemas/HttpError'
  /guards/{guardName}:
    get:
      operationId: getGuard
      tags:
        - guard
      summary: Fetches a specific Guard
      parameters:
        - $ref: '#/components/parameters/GuardName'
        - $ref: '#/components/parameters/AsOf'
      security:
        - apiKeyAuth: []
        - bearerAuth: []
      responses:
        '200':
          description: the fetched Guard
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Guard'
        default:
          $ref: '#/components/schemas/HttpError'
    put:
      operationId: updateGuard
      tags:
        - guard
      summary: Updates a Guard
      parameters:
        - $ref: '#/components/parameters/GuardName'
      security:
        - apiKeyAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Guard'
      responses:
        '200':
          description: the updated Guard
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Guard'
        default:
          $ref: '#/components/schemas/HttpError'
    delete:
      operationId: deleteGuard
      tags:
        - guard
      summary: Deletes a Guard
      parameters:
        - $ref: '#/components/parameters/GuardName'
      security:
        - apiKeyAuth: []
        - bearerAuth: []
      responses:
        '200':
          description: the deleted Guard
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Guard'
        default:
          $ref: '#/components/schemas/HttpError'
  /guards/{guardName}/validate:
    post:
      operationId: validate
      tags:
        - guard
        - validate
      summary: Runs the validations specified in a Guard
      security:
        - apiKeyAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/GuardName'
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/ValidatePayload'
      responses:
        '200':
          description: The output of the validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationOutput'
        default:
          $ref: '#/components/schemas/HttpError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiKeyAuth:
      type: apiKey
      in: header
      name: authorization
      description: JWT token
  parameters:
    GuardName:
      name: guardName
      in: path
      description: Guard name
      required: true
      schema:
        type: string
    AsOf:
      name: asOf
      in: query
      description: Used to query for data as it existed at this date and time
      required: false
      schema: 
        type: string
        format: date
  schemas:
    HttpError:
      type: object
      properties:
        status:
          type: number
          description: A valid http status code
        message:
          type: string
          description: A message explaining the status
        cause:
          type: string
          description: Used to describe the origin of an error if that original error has meaning to the client.  This field should add specificity to 'message'.
        fields:
          type: object
          description: Used to identify specific fields in a JSON body that caused the error.  Typically only used for 4xx type responses.  The key should be the json path to the invalid property and the value should be an error message specific to that property.
          additionalProperties:
            type: string
        context:
          type: string
          description: Used to identify what part of the request caused the error for non-JSON payloads.
      required:
        - status
        - message
    HealthCheck:
      type: object
      properties:
        status:
          type: number
          description: A valid http status code
        message:
          type: string
          description: A message explaining the status
      required:
        - status
        - message
    Guard:
      type: object
      properties:
        name:
          type: string
          description: A unique name for this guard configuration.
        railspec:
          $ref: '#/components/schemas/RailSpec'
        numReasks:
          type: number
          description: The number of re-asks to perform during validation when a validation fails.
        # The below might belong in the /validate endpoint payload
        guardConfig:
          type: object
          description: Addtional guard configuration attributes.
          additionalProperties: {}
        llmEndpoint:
          type: string
          description: The endpoint for the targetted LLM.
      required:
        - name
        - railspec
    RailSpec:
      type: object
      description: A JSONified version of the user provided railspec.
      properties:
        inputSchema:
          $ref: '#/components/schemas/Schema'
        outputSchema:
          $ref: '#/components/schemas/Schema'
        instructions:
          type: string
        prompt:
          type: string
        script:
          $ref: '#/components/schemas/Script'
        version:
          type: string
          default: "0.1"
          enum:
            - "0.1"
    Schema:
      type: object
      properties:
        schema:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DataType'
    DataType:
      type: object
      properties:
        children:
          type: object
          additionalProperties: {}
        formatters:
          type: array
          items:
            type: string
        element:
          $ref: '#/components/schemas/SchemaElement'
    Script:
      type: object
      properties:
        text:
          type: string
        language:
          type: string
        variables:
          type: object
          additionalProperties: {}
    SchemaElement:
      type: object
      properties:
        type:
          type: string
        name:
          type: string
        description:
          type: string
        strict:
          type: boolean
        dateFormat:
          type: string
        timeFormat:
          type: string
        onFail:
          type: string
        model:
          type: string
    ValidationOutput:
      type: object
      properties:
        result:
          type: boolean
          description: Whether the validation passed or failed
        validatedOutput:
          type: string
        sessionHistory:
          type: array
          items:
            $ref: '#/components/schemas/HistoryEvent'
        additionalProperties: {}
      required:
        - result
    HistoryEvent:
      type: object
      properties:
        input:
          type: string
        validationId:
          type: string
        output:
          type: boolean
        additionalProperties: {}
    ValidatePayload:
      type: string
      description: The LLM output as a string or the input prompts for the LLM
      example: stubbed llm output