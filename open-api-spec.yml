openapi: "3.0.0"
info:
  title: GuardRails API
  version: "0.0.0"
  description: GuardRails CRUD API
paths:
  /health-check:
    get:
      tags:
        - Service Health
      security:
        - apiKeyAuth: []
        - bearerAuth: []
      responses:
        "200":
          description: Returns the status of the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheck"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
  /guards:
    get:
      operationId: getGuards
      tags:
        - guard
      summary: Fetches the configuration for all Guards the user has access to.
      security:
        - apiKeyAuth: []
        - bearerAuth: []
      responses:
        "200":
          description: A list of Guards.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Guard"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
    post:
      operationId: createGuard
      tags:
        - guard
      summary: Creates a Guard
      security:
        - apiKeyAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Guard"
      responses:
        "200":
          description: the new Guard
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Guard"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
  /guards/{guardName}:
    get:
      operationId: getGuard
      tags:
        - guard
      summary: Fetches a specific Guard
      parameters:
        - $ref: "#/components/parameters/GuardName"
        - $ref: "#/components/parameters/AsOf"
      security:
        - apiKeyAuth: []
        - bearerAuth: []
      responses:
        "200":
          description: the fetched Guard
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Guard"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
    put:
      operationId: updateGuard
      tags:
        - guard
      summary: Updates a Guard
      parameters:
        - $ref: "#/components/parameters/GuardName"
      security:
        - apiKeyAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Guard"
      responses:
        "200":
          description: the updated Guard
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Guard"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
    delete:
      operationId: deleteGuard
      tags:
        - guard
      summary: Deletes a Guard
      parameters:
        - $ref: "#/components/parameters/GuardName"
      security:
        - apiKeyAuth: []
        - bearerAuth: []
      responses:
        "200":
          description: the deleted Guard
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Guard"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
  /guards/{guardName}/validate:
    post:
      operationId: validate
      tags:
        - guard
        - validate
      summary: Runs the validations specified in a Guard
      security:
        - apiKeyAuth: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/GuardName"
        - $ref: "#/components/parameters/OpenAiApiKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ValidatePayload"
      responses:
        "200":
          description: The output of the validation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationOutput"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiKeyAuth:
      type: apiKey
      in: header
      name: authorization
      description: JWT token
  parameters:
    GuardName:
      name: guardName
      in: path
      description: Guard name
      required: true
      schema:
        type: string
    AsOf:
      name: asOf
      in: query
      description: Used to query for data as it existed at this date and time
      required: false
      schema:
        type: string
        format: date-time
    OpenAiApiKey:
      name: x-openai-api-key
      in: header
      description: A valid OpenAI API Key for calling LLM's on your behalf
      required: false
      schema:
        type: string
        format: password
  schemas:
    HttpError:
      type: object
      properties:
        status:
          type: integer
          description: A valid http status code
        message:
          type: string
          description: A message explaining the status
        cause:
          type: string
          description: Used to describe the origin of an error if that original error has meaning to the client.  This field should add specificity to 'message'.
        fields:
          type: object
          description: Used to identify specific fields in a JSON body that caused the error.  Typically only used for 4xx type responses.  The key should be the json path to the invalid property and the value should be a list of error messages specific to that property.
          additionalProperties:
            type: array
            items:
              type: string
        context:
          type: string
          description: Used to identify what part of the request caused the error for non-JSON payloads.
      required:
        - status
        - message
    HealthCheck:
      type: object
      properties:
        status:
          type: integer
          description: A valid http status code
        message:
          type: string
          description: A message explaining the status
      required:
        - status
        - message
    Guard:
      type: object
      properties:
        name:
          type: string
          description: A unique name for this guard.
        description:
          type: string
          description: A description of this guard.
        railspec:
          $ref: "#/components/schemas/RailSpec"
        numReasks:
          type: integer
          description: The number of re-asks to perform during validation when a validation fails.
        # The below might belong in the /validate endpoint payload
        guardConfig:
          type: object
          description: Addtional guard configuration attributes.
          additionalProperties: {}
        llmEndpoint:
          type: string
          description: The endpoint for the targetted LLM.
      required:
        - name
        - railspec
    RailSpec:
      type: object
      description: A JSONified version of the user provided railspec.
      properties:
        inputSchema:
          $ref: "#/components/schemas/Schema"
        outputSchema:
          $ref: "#/components/schemas/Schema"
        instructions:
          type: string
        prompt:
          type: string
        version:
          type: string
          default: "0.1"
          enum:
            - "0.1"
      required:
        - outputSchema
        - prompt
        - version
    Schema:
      type: object
      properties:
        schema:
          oneOf:
            - $ref: "#/components/schemas/JsonSchema"
            - $ref: "#/components/schemas/DataType"
      required:
        - schema
    JsonSchema:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/DataType"
    DataType:
      type: object
      properties:
        children:
          type: object
          additionalProperties: {}
        formatters:
          type: array
          items:
            type: string
        plugins:
          type: array
          items:
            type: string
        element:
          $ref: "#/components/schemas/SchemaElement"
      required:
        - element
    SchemaElement:
      type: object
      properties:
        type:
          type: string
        name:
          type: string
        description:
          type: string
        strict:
          type: boolean
        dateFormat:
          type: string
        timeFormat:
          type: string
        onFail:
          type: string
        onFails:
          type: array
          items:
            $ref: "#/components/schemas/OnFail"
        model:
          type: string
      required:
        - name
        - type
    OnFail:
      type: object
      properties:
        validatorTag:
          type: string
        method:
          $ref: "#/components/schemas/OnFailOptions"
      required:
        - validatorTag
        - method
    OnFailOptions:
      type: string
      enum: [
        "exception",
        "filter",
        "fix",
        "fix_reask",
        "noop",
        "reask",
        "refrain"
      ]
    ValidationOutput:
      type: object
      properties:
        result:
          type: boolean
          description: Whether the validation passed or failed
        validatedOutput:
          type: string
        sessionHistory:
          type: array
          items:
            $ref: "#/components/schemas/History"
        rawLlmResponse:
          type: string
      additionalProperties: {}
      required:
        - result
    History:
      type: object
      properties:
        history:
          type: array
          items:
            $ref: "#/components/schemas/HistoryEvent"
    HistoryEvent:
      type: object
      properties:
        instructions:
          type: string
        output:
          type: string
        parsedOutput:
          type: object
          properties: {}
          additionalProperties: {}
        prompt:
          type: object
          properties:
            source:
              type: string
        reasks:
          type: array
          items:
            type: object
            properties: {}
            additionalProperties: {}
        validatedOutput:
          type: object
          properties: {}
          additionalProperties: {}
      additionalProperties: {}
    Reask:
      type: object
      properties:
        incorrect_value:
          $ref: "#/components/schemas/Any"
        error_message:
          type: string
        fix_value:
          $ref: "#/components/schemas/Any"
        path:
          type: array
          items:
            $ref: "#/components/schemas/Any"
    Any:
      oneOf:
        - $ref: "#/components/schemas/AnyArray"
        - $ref: "#/components/schemas/AnyObject"
        - $ref: "#/components/schemas/AnyPrimitive"
    AnyPrimitive:
      oneOf:
        - type: boolean
        - type: integer
        - type: number
        - type: string
    AnyObject:
      type: object
      properties: {}
      additionalProperties: {}
    # Cannot generate clients for recursive references
    AnyArray:
      type: array
      items:
        oneOf:
          - $ref: "#/components/schemas/AnyObject"
          - $ref: "#/components/schemas/AnyPrimitive"
          - type: array
            items:
              oneOf:
                - $ref: "#/components/schemas/AnyObject"
                - $ref: "#/components/schemas/AnyPrimitive"
    ValidatePayload:
      type: object
      properties:
        llmOutput:
          type: string
          description: The LLM output as a string or the input prompts for the LLM
          example: stubbed llm output
        numReasks:
          type: integer
          description: An override for the number of re-asks to perform
        promptParams:
          type: object
          description: additional params for llm prompts
          properties: {}
          additionalProperties: {}
        llmApi:
          type: string
          enum:
            [
              "openai.Completion.create",
              "openai.ChatCompletion.create",
              "openai.Completion.acreate",
              "openai.ChatCompletion.acreate",
            ]
      additionalProperties: {}
